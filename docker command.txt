1. 윈도우에서 도커 툴 박스(Docker Toolbox)를 설치해서 도커 구동시키기

​

docker ps    // 현재 돌아가고 있는 컨테이너를 확인하는 명령

​

docker images      // 현재 도커 머신에 설치된 도커 이미지를 확인하는 명령

​

docker run -a busybox echo "Hello World"   

- 로컬 서버에서 busybox 이미지를 찾음

- 로컬 서버에 해당 이미지가 없으면 Docker Hub에서 자동 다운 받음

- 해당 이미지를 이용해 컨테이너를 실행

- 컨테이너 실행 과정에서 디스크 및 메모리를 할당해서 순식간에 리눅스 서버 구축

- 새롭게 생성된 리눅스 서버에서 "Hello World"를 출력

- 출력된 결과를 유닉스 소켓을 이용해 클라이언트로 전송하여 화면에 출력함

​

​

1. ps설치
apt-get update && apt-get install procps
2. vi 설치
# apt-get update
# apt-get install vim
# apt-get install wget
# apt-get install net-tools
# apt-get install iputils-ping

<ssh>
sudo apt-get install ssh
sudo systemctl ssh start
sudo systemctl ssh enable
service ssh status
 
vi /etc/ssh/sshd_config
PermitRootLogin을 찾아 주석을 해제하고 yes로 변경
service ssh start

3.
dorcker run 


4.
docker exec -it tomcat /bin/bash
docker images
docker stop id
docker start 
docker run -d 이미지 --name 이름 -p 포트번호 
docker cp ~/data/test.md tmp_container:/root/data/

5. gradle
docker run -u root -v "$PWD":/home/gradle/project -w /home/gradle/project gradle

6. Jenkins
docker run -itd -p 8085:8080 -v /jenkins:/var/jenkins_home --name jenkins -u root jenkins/jenkins



※ 도커 소프트웨어의 개요 ※

도커는 크게 ① 오픈소스 무료 버전(Community Edition), ② 유료 버전(Enterprise Edition)으로 나뉩니다.

​

기본적으로 CE 버전으로도 도커의 모든 기능을 이용하는데 큰 제약이 없지만 안정적으로 실 서버에 도커를 운용하려면 EE를 사용하는 것이 훨씬 유리합니다. 기본적으로 도커 EE를 쓰면 각 서버별로 연간 1,000 달러 이내의 라이선스 비용이 소요됩니다. 다만 전반적인 배포 과정을 훨씬 편리하게 해주어 효용이 높습니다. 또한 현재는 기본적으로 도커 엔진 자체가 사실상 스웜(Swarm)이나 쿠버네티스(Kubernetes) 기술을 지원하고 있어서 유료 서비스만 잘 엮어서 쓰면 매우 강력한 기능을 쉽게 이용할 수 있습니다.

​

도커 엔진(Docker Engine): 특정한 소프트웨어를 도커 컨테이너로 만들고 실행하게 해주는 데몬(Daemon)을 의미합니다. 도커 엔진과 도커 클라이언트 사이에는 REST API가 사용됩니다. REST API 서버에 요청을 보내는 것이 도커 클라이언트입니다.

​

도커 클라이언트(Docker Client): 도커 엔진과 통신하는 소프트웨어로 개발자가 직접 이용할 수 있습니다. 윈도우(Window)/맥(Mac)/리눅스(Linux)를 지원합니다. 물론 윈도우는 도커를 사용하기에 최악의 조건이고, 리눅스가 제일 최상의 조건이지만 도커는 공식적으로 윈도우를 제대로 지원하고 있습니다.

​

도커 호스트 운영체제(Docker Host OS): 도커 엔진을 설치할 수 있는 운영체제 환경을 의미합니다. 64비트 리눅스 커널 버전 3.10 이상 환경을 의미하고, 32비트 환경에서는 도커 엔진이 돌아가지 않는답니다. 애초에 초기의 도커 이미지는 심지어 오직 우분투(Ubuntu) 운영체제 전용이었어요. 현재는 우분투, CentOS, Debian, Fedora 등에서 사용할 수 있게 되었지만요.

​

추가적으로 언급하자면, 사실 윈도우는 Docker Host OS가 될 수 없습니다. 당연한 거죠. 도커 엔진은 기본적으로 리눅스 OS 위에서 돌아가는거니까 가상화 기능이 필요합니다. 하지만 다행히도 마이크로소프트(Microsoft)는 기본적으로 도커(Docker)에 많은 관심을 가지고 있는 상황입니다. 그 결과 마이크로소프트는 도커의 초기 버전부터 많은 모듈을 덧붙여서 윈도우 파일 시스템과 도커의 파일 시스템이 연동될 수 있도록 모듈을 개발하여, 현재는 윈도우 컨테이너가 도커 명령어로 정상적으로 작동하고 리눅스 컨테이너와 상호 통신까지 가능합니다.

​

도커 머신(Docker Machine): 로컬 및 원격지 서버에 도커 엔진을 설치하고, 다양한 환경 설정을 자동으로 수행해주는 클라이언트를 의미합니다.

​

우리가 이번 시간에 설치하게 될 도커 툴박스(Docker Toolbox)는 도커 CE의 이전 버전인데, 윈도우 10 Enterprise/Professional 이전 버전의 윈도우 사용자는 필수적으로 이러한 도커 툴박스를 이용해야 합니다. 물론 기능상으로 큰 문제는 없기 때문에 그냥 이용하시면 됩니다.

​

▶ 도커 툴 박스 설치 사이트: https://docs.docker.com/toolbox/toolbox_install_windows/

​

위 사이트에 접속하면 기본적으로 윈도우 10 Enterprise/Professional은 툴박스가 아니라 윈도우 도커(Docker For Windows) 애플리케이션을 설치할 것을 권장하는 것을 알 수 있습니다. 하지만 우리는 최신 버전의 도커 애플리케이션을 이용하지 않고, 툴박스를 이용할 겁니다. 툴박스를 이용해도 기능적으로는 문제가 없습니다. 이용상의 장단점에 대해서는 차차 알아가시면 됩니다.

​

우리가 설치할 도커 툴박스는 기본적으로 오라클 VM VirtualBox를 기반으로 동작합니다. 쉽게 말하면 윈도우 위에 리눅스 가상 머신을 돌리고, 그 위에서 도커 엔진을 돌리는 방식이라고 이해할 수 있습니다. 그래서 일단 기본적인 VM 가상화 기능을 사용할 수 있어야 합니다. 따라서 윈도우 운영체제에서 '작업 관리자'의 '성능' 탭에 들어갔을 때 가상화 기능이 활성화 되어있어야 합니다.

​

2. docker desktop 설치 시 에러는 아래 주소 참조

Logs and troubleshooting | Docker Documentation

​

3. DockerToolbox-18.03.0-ce.exe  설치 후, 각종 에러 시 에러 별 해결방법

 1) This computer doesn't have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory 오류 발생할 시 BIOS 에서 설정 변경 후 사용 가능

 2)(0x80004005) 에러

 3)(code -1073741819 0xc0000005) 

 -- virtualbox를 최신 버전(virtualBox 6.1.28 platform packages)으로 업데이트 받아서 설치 후 해결됨 --

​

윈도우에서 설치(체킹) 해줘야 할 것!

제어판 > 모든 제어판 항목 > 프로그램 및 기능 > Windows 기능 켜기/끄기 > 

- Hyper-V    

// Hyper-V를 사용하는 경우, Hyper-V에서, 가상화기술을 독점하기 때문에 VirtualBox또는 Vmware를 사용할 수 없는 것이라 한다. 그렇지만, bcdedit를 이용하여, 재부팅하는 번거로움은 있지만, 재설치하지 않고, 사용할 수 있다. 

​VirtualBox를 사용하는 경우. 관리자 콘솔에서,

bcdedit /set hypervisorlaunchtype off

실행 후, 재시작.

​hyper-v 를 사용하는 경우, 관리자 콘솔에서,

bcdedit /set hypervisorlaunchtype auto   // 내것은 이것으로 성공

실행 후 , 재시작. 

​

- Linux용 Windows 하위 시스템

- 가상 머신 플랫폼 

​

4.  

## .

## ## ## ==

## ## ## ## ## ===

/"""""""""""""""""\___/ ===

~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~

\______ o __/

\ \ __/

\____\_______/

​

docker is configured to use the default machine with IP 192.168.99.100

For help getting started, check out the docs at https://docs.docker.com

​

​

Start interactive shell

​

sklee@DESKTOP-CMVETT5 MINGW64 /c/Program Files/Docker Toolbox

$

---------------------------------  설치 성공!    답은 virtualbox  최신버전 업데이트네

​

​

-------------------------------------------------------------------------------------------------------------------------

​

1. search 명령으로 이미지 검색하기

$docker search ubuntu // Docker Hub에서 이미지를 검색한 뒤 해당 이미지의 Tags 탭을 보면 현재 사용할 수 있는 이미지의 버전을 볼 수 있습니다.

https://registry.hub.docker.com/_/ubuntu/tags/manage/

​

현재 계정을 docker 그룹에 포함(docker 그룹은 root 권한과 동일하므로 꼭 필요한 계정만 포함시킵니다).

$ sudo usermod -aG docker ${USER}

$ sudo service docker restart

현재 계정에서 로그아웃한 뒤 다시 로그인합니다.

​

2. pull 명령으로 이미지 받기

$docker pull ubuntu:latest // docker pull <이미지 이름>:<태그> 형식입니다. 

​

3. images 명령으로 이미지 목록 출력하기

$docker images

REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE

ubuntu latest e54ca5efa2e9 Less than a second ago 276.1 MB

​

4. run 명령으로 컨테이너 생성하기

docker run -i -t --name hello ubuntu /bin/bash // docker run <옵션> <이미지 이름> <실행할 파일> 형식입니다. 여기서는 ubunbu 이미지를 컨테이너로 생성한 뒤 ubuntu 이미지 안의 /bin/bash를 실행합니다. 이미지 이름 대신 이미지 ID를 사용해도 됩니다.

​

-i(interactive), -t(Pseudo-tty) 옵션을 사용하면 실행된 Bash 셸에 입력 및 출력을 할 수 있습니다.

--name 옵션으로 컨테이너의 이름을 지정할 수 있습니다. 이름을 지정하지 않으면 Docker가 자동으로 이름을 생성하여 지정합니다.

이제 호스트 OS와 완전히 격리된 공간이 생성되었습니다. cd, ls 명령으로 컨테이너 내부를 한번 둘러봅니다. 호스트 OS와는 다르다는 것을 알 수 있습니다. exit를 입력하여 Bash 셸에서 빠져나옵니다. 우분투 이미지에서 /bin/bash 실행 파일을 직접 실행했기 때문에 여기서 빠져나오면 컨테이너가 정지(stop)됩니다.

​

CentOS에서 다음과 같은 에러가 발생한다면

unable to remount sys readonly: unable to mount sys as readonly max retries reached

/etc/sysconfig/docker 파일에서 다음과 같이 --exec-driver=lxc를 추가합니다.

​

/etc/sysconfig/docker

# /etc/sysconfig/docker

#

# Other arguments to pass to the docker daemon process

# These will be parsed by the sysv initscript and appended

# to the arguments list passed to docker -d

​

other_args="--selinux-enabled --exec-driver=lxc"

Docker 서비스를 재시작합니다.

​

$ sudo service docker restart

​

5. ps 명령으로 컨테이너 목록 확인하기

$ docker ps -a // -a 옵션을 사용하면 정지된 컨테이너까지 모두 출력하고, 옵션을 사용하지 않으면 실행되고 있는 컨테이너만 출력합니다.

​

6. start 명령으로 컨테이너 시작하기 

$ docker start hello // docker start 해당이미지가 run 되었을때 사용명령. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.

​

7. 다음 명령을 입력하여 실행된 컨테이너 목록을 출력합니다.

$ docker ps

CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES

6338ce52d07c ubuntu:latest /bin/bash 15 minutes ago Up 3 seconds hello

​

8. restart 명령으로 컨테이너 재시작하기

$ docker restart hello // 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.

​

9. attach 명령으로 컨테이너에 접속하기

$ docker attach hello // 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.

​

우리는 /bin/bash를 실행했기 때문에 명령을 자유롭게 입력할 수 있지만, DB나 서버 애플리케이션을 실행하면 입력은 할 수 없고 출력만 보게 됩니다.

​

Bash 셸에서 exit 또는 Ctrl+D를 입력하면 컨테이너가 정지됩니다. 여기서는 Ctrl+P, Ctrl+Q를 차례대로 입력하여 컨테이너를 정지하지 않고, 컨테이너에서 빠져나옵니다.

​

10. exec 명령으로 외부에서 컨테이너 안의 명령 실행하기

$ docker exec hello echo "Hello World" or docker exec -it hello /bin/bash // docker exec <컨테이너 이름> <명령> <매개 변수> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다. 컨테이너가 실행되고 있는 상태에서만 사용할 수 있으며 정지된 상태에서는 사용할 수 없습니다.

​

컨테이너 안의 echo 명령을 실행하고 매개 변수로 “Hello World”를 지정했기 때문에 Hello World가 출력됩니다. docker exec 명령은 이미 실행된 컨테이너에 apt-get, yum 명령으로 패키지를 설치하거나, 각종 데몬을 실행할 때 활용할 수 있습니다.

​

11. stop 명령으로 컨테이너 정지하기

$ docker stop hello // docker stop <컨테이너 이름> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.

​

12. rm 명령으로 컨테이너 삭제하기

$ sudo docker rm hello // docker rm <컨테이너 이름> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.

​

13. rmi 명령으로 이미지 삭제하기

$ sudo docker rmi ubuntu:latest // docker rmi <이미지 이름>:<태그> 형식입니다. 이미지 이름 대신 이미지 ID를 사용해도 됩니다. docker rmi ubuntu처럼 이미지 이름만 지정하면 태그는 다르지만 ubuntu 이름을 가진 모든 이미지가 삭제됩니다.

​

14. Dockerfile 작성하기

vi 

FROM ubuntu:18.04

MAINTAINER amado <amado@naver.com>

​

RUN apt-get update

RUN apt-get install -y nginx

RUN echo "\ndaemon off;" >> /etc/nginx/nginx.conf

RUN chown -R www-data:www-data /var/lib/nginx

​

VOLUME ["/data", "/etc/nginx/site-enabled", "/var/log/nginx"]

​

WORKDIR /etc/nginx

​

CMD ["nginx"]

​

EXPOSE 80

EXPOSE 443

​

OR

​

FROM ubuntu:18.04 // 어떤 이미지를 기반으로 할지 설정, 형식은 <이미지 이름>:<태그>

MAINTAINER amado <amado@naver.com> // 메인테이너 정보

​

RUN apt-get update // 쉘 스크립트 혹은 명령을 실행

RUN apt-get install -y apache2 # Install Apach web server (Only 'yes') // 이미지 생성 중에는 사용자 입력을 받을 수 없으므로 apt-get install 명령에서 -y 옵션을 사용합니다(yum install도 동일).

​

EXPOSE 80 // EXPOSE: 호스트와 연결할 포트 번호입니다.

​

CMD ["apachectl", "-D", "FOREGROUND"] // 컨테이너가 시작되었을 때 실행할 실행 파일 또는 셸 스크립트입니다.

​

15. Build 명령으로 이미지 생성

$ docker build --tag apm:0.1 . or -t apm:latest . // docker build <option> <dockerfile path> 

​

실행

$ docker run --name apm:0.1 -d -p 80:80 -v /root/data:/data hello:0.1 // -d 백그라운드에서 실행, -p 호스트 포트와 컨테이너 포트 연결하고 외부 노출 -v 디렉터리 마운트, --name apm 이름 지정은 안넣으도 됨.

​

​

-----------------------------------------------------------------------------------------------------------------

​

Bash 익히기

Bash(Bourne-again shell)를 주로 사용합니다. 

그래서 이미지를 생성하기 전에 자주 사용하는 Bash 문법을 간단히 알아보겠습니다.

​

문법 설명

>   출력 리다이렉션. 명령 실행의 표준 출력(stdout)을 파일로 저장합니다. 유닉스계열 운영체제는 장치도 파일로 처리하기 때문에 명령 실행 결과를 특정 장치로 보낼 수도 있습니다.

     $ echo "hello" > ./hello.txt

     $ echo "hello" > /dev/null

​

<   입력 리다이렉션. 파일의 내용을 읽어 명령의 표준 입력(stdin)으로 사용합니다.

     $ cat < ./hello.txt

​

>>   명령 실행의 표준 출력(stdout)을 파일에 추가합니다. >는 이미 있는 파일에 내용을 덮어쓰지만 >>는 파일 뒷부분에 내용을 추가합니다.

     $ echo "world" >> ./hello.txt

​

2>   명령 실행의 표준 에러(stderr)를 파일로 저장합니다.

2>>   명령 실행의 표준 에러(stderr)를 파일에 추가합니다.

&>   표준 출력과 표준 에러를 모두 파일로 저장합니다.

​

1>&2   표준 출력을 표준 에러로 보냅니다.  echo 명령으로 문자열을 표준 출력으로 출력했지만 

           표준 에러로 보냈기 때문에 변수에는 문자열이 들어가지 않습니다.

       $ hello=$(echo "Hello World" 1>&2)

       $ echo $hello

​

2>&1   표준 에러를 표준 출력으로 보냅니다. abcd라는 명령은 없으므로 에러가 발생하지만 

           에러를 표준 출력으로 보낸 뒤 다시 /dev/null로 보냈기 때문에 아무것도 출력되지 않습니다.

        $ abcd > /dev/null 2>&1

​

|   파이프. 명령 실행의 표준 출력을 다른 명령의 표준 입력으로 보냅니다. 

    즉 첫 번째 명령의 출력 값을 두 번째 명령에서 처리합니다.

     $ ls -al | grep .txt

​

$   Bash의 변수입니다. 값을 저장할 때는 $를 붙이지 않고, 변수를 가져다 쓸 때만 $를 붙입니다.

     $ hello="Hello World"

     $ echo $hello

     Hello World

​

$()   명령 실행 결과를 변수화합니다. 명령 실행 결과를 변수에 저장하거나 다른 명령의 매개 변수로 넘겨줄 때 사용합니다. 또는 문자열안에 명령의 실행 결과를 넣을 때 사용합니다.

     $ sudo docker rm $(docker ps -aq)

     $ echo $(date)

     Tue Sep 9 21:24:30 KST 2014

​

` `    $()과 마찬가지로 명령 실행 결과를 변수화합니다.

       $ sudo docker rm `docker ps -aq` 

       $ echo `date`

        Tue Sep 9 21:24:30 KST 2014

​

&&   한 줄에서 명령을 여러 개 실행합니다. 단 앞에 있는 명령이 에러 없이 실행되어야 뒤에 오는 명령이 실행됩니다.

      $ make && make install

​

;   한 줄에서 명령을 여러 개 실행합니다. 앞에 있는 명령이 실패를 해도 뒤에 오는 명령이 실행됩니다.

       $ false; echo "Hello"

       Hello

​

' '   문자열입니다. ' '안에 들어있는 변수는 처리되지 않고 변수명 그대로 사용됩니다. 또한 ` `와 $()도 처리되지 않고 그대로 사용됩니다.

       $ echo '$USER'

       $USER

       $USER가 그대로 출력됩니다.

​

" "    문자열입니다. 명령에 문자열 매개변수를 입력하거나 변수에 저장할 때 주로 사용합니다. ' '와는 달리 " "안에 변수가 들어있으면 변수의 내용으로 바뀝니다. 또한 ` `와 $()도 실행 결과 값이 사용됩니다.

         $ echo "Hello World"

          Hello World

         $ echo "$USER"

          sklee

         $ echo "Host name is $(hostname)"

         Host name is ubuntu

         $ echo "Time: `date`"

         Time: Tue Sep 9 21:28:10 KST 2014

​

" ' ' "    " "안에 ' '가 들어갈 수 있습니다. 명령 안에서 다시 명령을 실행하고 매개 변수를 지정할 때 사용합니다.

           $ bash -c "/bin/echo Hello 'World'"

           Hello World

​

\"

\$hello    ' '안에서 "를 사용할 때는 \"처럼 앞에 \를 붙여줍니다.

             $ bash -c "/bin/echo '{ \"user\": \"$USER\" }'"

             { "user": "sklee" }

             " "안에서 ", $, ` 등의 특수문자를 그대로 사용하려면 앞에 \를 붙여줍니다.

             $ echo "\$hello \" \`"

             $hello " `

​

${}   변수 치환(substitution)입니다. " " 문자열 안에서 변수를 출력할 때 주로 사용합니다. ${} 대신 $만 사용해도 됩니다.

            $ str="World"

            $ echo "Hello ${str}"

            Hello World

           스크립트에서 변수의 기본 값을 설정할 때도 사용합니다. 다음은 HELLO 변수가 있으면 그대로 사용하고 변수가 없으면 기본 값으로 설정한 abcd를 대입합니다.

           $ HELLO=

           $ HELLO=${HELLO-"abcd"}

           $ echo $HELLO

           값이 NULL인 HELLO 변수가 이미 있기 때문에 기본 값을 대입하지 않습니다. 다음은 변수에 값이 있으면 그대로 사용하고, 값이 NULL이면 기본 값으로 설정한 abcd를 대입합니다.

           $ WORLD=

           $ WORLD=${WORLD:-"abcd"}

           $ echo $WORLD

           abcd

          변수에 값이 NULL이므로 기본 값을 대입합니다.

​

\   한 줄로된 명령을 여러 줄로 표현할 때 사용합니다.

       $ sudo docker run -d --name hello busybox:latest

       $ sudo docker run \

            -d \

            --name hello \

            busybox:latest

​

{1..10}   연속된 숫자를 표현합니다. {시작 숫자..끝 숫자} 형식입니다.

           $ echo {1..10}

           1 2 3 4 5 6 7 8 9 10

​

{문자열1,문자열2}   {}안에 문자열을 여러 개 지정하여 명령 실행 횟수를 줄입니다. 다음은 hello.txt, world.txt 두 파일을  

                          한번에 hello-dir 디렉터리 아래에 복사합니다.

                           $ cp ./{hello.txt,world.txt} hello-dir/

​

if    if 조건문입니다. 변수와 변수끼리 또는 문자열과 비교할 때 사용합니다.

     if [ $a -eq $b ]; then

     echo $a

     fi

​

숫자 비교

-eq: 같다

-ne: 같지 않다

-gt: 초과

-ge: 이상

-lt: 미만

-le: 이하

​

문자열 비교

=, ==: 같다

!=: 같지 않다

-z: 문자열이 NULL일 때

-n: 문자열이 NULL이 아닐 때

​

for    for 반복문입니다. 변수안에 있는 값을 반복하거나 범위를 지정하여 반복할 수 있습니다.

for i in $(ls)

do

echo $i

done

​

for (( i=0; i < 10; i++ ))

do

echo $i

done

​

NUM=(1 2 3)

for i in ${NUM[@]}

do

echo $i

done

​

while    while 반복문입니다.

while :

do

echo "Hello World";

sleep 1;

done

​

<<<    문자열을 명령(프로세스)의 표준 입력으로 보냅니다.

          $ cat <<< "User name is $USER"

          User name is sklee

​

<<EOF

EOF      여러 줄의 문자열을 명령(프로세스)의 표준 입력으로 보냅니다.

           cat > ./hello.txt <<EOF

           Hello World

           Host name is $(hostname)

           User name is $(USER)

           EOF

cat은 파일이나 표준 입력의 내용을 출력하는 명령입니다. cat의 표준 출력을 ./hello.txt로 저장하고, <<EOF로 문자열을 cat의 표준 입력으로 보냅니다. 이렇게 하면 문자열 3줄이 ./hello.txt 파일에 저장됩니다.

​

export    설정한 값을 환경 변수로 만듭니다. export <변수>=<값> 형식입니다.

         $ export HELLO=world

​

printf    지정한 형식대로 값을 출력합니다. 파이프와 연동하여 명령(프로세스)에 값을 입력하는 효과를 낼 수 있습니다.

        $ printf 80\\nexampleuser\\ny | example-config

         Port: 80

         User: exampleuser

         Save Configuration (y/n): y

예를 들어 example-config는 Port, User, Save Configuration을 사용자에게 입력을 받습니다. printf로 미리 값을 설정하여 파이프로 example-config에 넘겨주면 사용자가 입력하지 않아도 자동으로 값이 입력됩니다. 줄바꿈(개행)은 \\n으로 표현합니다.

​

sed    텍스트 파일에서 문자열을 변경합니다. hello.txt 파일의 내용 중에서 hello라는 문자열을 찾아서 world 문자열로 바꾸려면 다음과 같이 실행합니다.

         $ sed -i "s/hello/world/g" hello.txt

         sed -i "s/<찾을 문자열><바꿀 문자열>/g" <파일명> 형식입니다. /와 같은 특수 문자는 앞에 \를 붙여 \/로 입력합니다.

​

#    주석입니다. 스크립트에 설명을 추가하거나, 명령이 실행되지 않도록 합니다.

      # echo "Hello World"
[출처] Docker Toolbox 설치  // docker 명령어  // Hyper-V (기본에 충실하자!) | 작성자 amadojob