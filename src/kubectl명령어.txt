kubectl 바이너리 설치
curl -LO "https://dl.k8s.io/release/v1.24.0/bin/windows/amd64/kubectl.exe"
대시보드 실행
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml
kubectl proxy
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
토큰 발행
kubectl -n kubernetes-dashboard create token admin-user
kubectl -n default create token admin
삭제
kubectl --namespace kube-system delete deployment,service kubernetes-dashboard
설정조회
kubectl config view


<토큰>
kubeadm token list
kubeadm token create

<Role>
kubectl describe clusterrole kubernetes-dashboard

kubectl describe role kubernetes-dashboard -n kubernetes-dashboard

kubectl get rolebindings,clusterrolebindings --all-namespaces -o custom-columns='KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,SERVICE_ACCOUNTS:subjects[?(@.kind=="ServiceAccount")].name'


namespace  하위리소스 확인
kubectl api-resources --namespaced -o name

<kubectl>
kubectl.exe get na
kubectl get namespace
kubectl create namespace dev
notepad.exe dev.yamlkub
kubectl describe namespace dev
kubectl apply -f https://k8s.io/examples/admin/resource/quota-mem-cpu.yaml --namespace=quota-mem-cpu-example
kubectl get resourcequota mem-cpu-demo --namespace=quota-mem-cpu-example --output=yaml
kubectl get pod quota-mem-cpu-demo --namespace=quota-mem-cpu-example
kubectl get resourcequota mem-cpu-demo --namespace=quota-mem-cpu-example --output=yaml

kubectl exec -it 파드명 /bin/bash 

<기본명령어>
#k8s-node1 워크노트에 key=worker 라는 label 추가해보기
kubectl label nodes k8s-node1 key=worker
k8s-node1  Ready  <none> 22m v1.18.6   .,key=worker,kubernetes.io/ #<-key=worker 추가확인

#k8s-node1 워크노트에 label 삭제해보기
kubectl label nodes k8s-node1 key-

#kubectl get nodes --show-labels # 조회해보기

# dev라는 dev namespace 생성해보기
kubectl create namespace dev                  # dev 라는 네임스페이스 생성

#dev namespace pod 생성해보기
kubectl apply -f  hello-node.yaml --namespace=dev
-->NAMESPACE NAME         READY   STATUS     RESTARTS   AGE
   dev       hello-node   1/1     Running    0          5m28s

#dev namespace 있는 hello-node pod 삭제해보기 
kubectl delete pod,service hello-node --namespace=dev

#활성화 네임스페이스 확인
$ kubectl config view | grep namespace

# 기본 출력을 위한 Get 커맨드
kubectl create namespace dev                  # dev 라는 네임스페이스 생성
kubectl get services                          # 네임스페이스 목록 조회
kubectl get pods --all-namespaces             # 모든 네임스페이스파드의 목록 조회
kubectl get pods -o wide                      # 네임스페이스 내 모든 파드의 상세 목록 조회
kubectl get deployment my-dep                 # 특정 디플로이먼트의 목록 조회
kubectl get pods                              # 네임스페이스 내 모든 파드의 목록 조회
kubectl get pod my-pod -o yaml                # 파드의 YAML 조회

<pod>
1. pod-nginx.yaml 파일을 생성해봅니다.
$vi pod-nginx.yaml
아래 내용 삽입

apiVersion: v1
kind: Pod
metadata:
  name: nginx  
  labels:
    name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
  - containerPort: 
    
    
2. 적용해보기    
$ kubectl apply -f pod-nginx.yaml
pod/nginx created
or
$kubectl run 파드이름 --image=도커이미지

3. 확인하기
$ kubectl get pod nginx
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          10
# Pod 조회
kubectl get pod
$ kubectl get pods --all-namespaces

# 줄임말(Shortname)과 복수형 사용가능
kubectl get pods
kubectl get po

# 여러 TYPE 입력
kubectl get pod,service
#
kubectl get po,svc

# Pod, ReplicaSet, Deployment, Service, Job 조회 => all
kubectl get all

# 결과 포멧 변경
kubectl get pod -o wide
kubectl get pod -o yaml
kubectl get pod -o json

# Label 조회
kubectl get pod --show-labels


# 상세 출력을 위한 Describe 커맨드
kubectl describe nodes my-node
kubectl describe pods my-pod

# Name으로 정렬된 서비스의 목록 조회
kubectl get services --sort-by=.metadata.name

# 재시작 횟수로 정렬된 파드의 목록 조회
kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

# PersistentVolumes을 용량별로 정렬해서 조회
kubectl get pv --sort-by=.spec.capacity.storage

# app=cassandra 레이블을 가진 모든 파드의 레이블 버전 조회
kubectl get pods --selector=app=cassandra -o \
  jsonpath='{.items[*].metadata.labels.version}'

# 모든 워커 노드 조회 (셀렉터를 사용하여 'node-role.kubernetes.io/master'
# 으로 명명된 라벨의 결과를 제외)
kubectl get node --selector='!node-role.kubernetes.io/master'

# 네임스페이스의 모든 실행 중인 파드를 조회
kubectl get pods --field-selector=status.phase=Running

# 모든 노드의 외부IP를 조회
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

# 특정 RC에 속해있는 파드 이름의 목록 조회
# "jq" 커맨드는 jsonpath를 사용하는 매우 복잡한 변환에 유용하다. https://stedolan.github.io/jq/ 에서 확인할 수 있다.
sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')%?}
echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})

# 모든 파드(또는 레이블을 지원하는 다른 쿠버네티스 오브젝트)의 레이블 조회
kubectl get pods --show-labels

# 어떤 노드가 준비됐는지 확인
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}' \
 && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"

# 파드에 의해 현재 사용되고 있는 모든 시크릿 목록 조회
kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq

# 모든 파드의 초기화 컨테이너(initContainer)의 컨테이너ID 목록 조회
# 초기화 컨테이너(initContainer)를 제거하지 않고 정지된 모든 컨테이너를 정리할 때 유용하다.
kubectl get pods --all-namespaces -o jsonpath='{range .items[*].status.initContainerStatuses[*]}{.containerID}{"\n"}{end}' | cut -d/ -f3

# 타임스탬프로 정렬된 이벤트 목록 조회
kubectl get events --sort-by=.metadata.creationTimestamp

# 매니페스트가 적용된 경우 클러스터의 현재 상태와 클러스터의 상태를 비교한다.
kubectl diff -f ./my-manifest.yaml



kubectl get pods --all-namespaces
kubectl config set-context --current --namespace=default

<리소스 삭제>
kubectl delete -f ./pod.json                                              # pod.json에 지정된 유형 및 이름을 사용하여 파드 삭제
kubectl delete pod,service baz foo                                        # "baz", "foo"와 동일한 이름을 가진 파드와 서비스 삭제
kubectl delete pods,services -l name=myLabel                              # name=myLabel 라벨을 가진 파드와 서비스 삭제
kubectl delete pods,services -l name=myLabel --include-uninitialized      # 초기화되지 않은 것을 포함하여, name=myLabel 라벨을 가진 파드와 서비스 삭제
kubectl -n my-ns delete pod,svc --all                                      # 초기화되지 않은 것을 포함하여, my-ns 네임스페이스 내 모든 파드와 서비스 삭제
# awk pattern1 또는 pattern2에 매칭되는 모든 파드 삭제
kubectl get pods  -n mynamespace --no-headers=true | awk '/pattern1|pattern2/{print $1}' | xargs  kubectl delete -n mynamespace pod

<자주사용하는 명령어>
1) pod 생성
kubectl에는 create와 appy가 있는데, create -f 로 하면 이후에 apply를 통해 다시 반영할 수 없다. 
그러나 처음부터 apply -f 로 하면 계속 apply할 수 있다는 차이점이 있다.

2) kubectl create -f nginx-deployment.yaml
pod 상태를 조회한다.

3) kubectl get pods
NAME                                READY     STATUS    RESTARTS   AGE
nginx-deployment-7fc9b7bd96-7nmtx   0/1       Pending   0          6m
nginx-deployment-7fc9b7bd96-9q6w2   0/1       Pending   0          6m

4) pod 삭제
$ kubectl delete -f nginx-deployment.yaml
deployment.extensions "nginx-deployment" deleted
pod 상태를 조회한다.

5) 조회
$ kubectl get pods
No resources found.


<로그확인>
kubectl logs my-pod                                 # 파드 로그(stdout) 덤프
kubectl logs -l name=myLabel                        # name이 myLabel인 파드 로그 덤프 (stdout)
kubectl logs my-pod --previous                      # 컨테이너의 이전 인스턴스 생성에 대한 파드 로그(stdout) 덤프
kubectl logs my-pod -c my-container                 # 파드 로그(stdout, 멀티-컨테이너 경우) 덤프
kubectl logs -l name=myLabel -c my-container        # name이 myLabel인 파드 로그 덤프 (stdout)
kubectl logs my-pod -c my-container --previous      # 컨테이너의 이전 인스턴스 생성에 대한 파드 로그(stdout, 멀티-컨테이너 경우) 덤프
kubectl logs -f my-pod                              # 실시간 스트림 파드 로그(stdout)
kubectl logs -f my-pod -c my-container              # 실시간 스트림 파드 로그(stdout, 멀티-컨테이너 경우)
kubectl logs -f -l name=myLabel --all-containers    # name이 myLabel인 모든 파드의 로그 스트리밍 (stdout)
kubectl run -i --tty busybox --image=busybox -- sh  # 대화형 셸로 파드를 실행
kubectl run nginx --image=nginx -n
mynamespace                                         # 특정 네임스페이스에서 nginx 파드 실행
kubectl run nginx --image=nginx                     # nginx 파드를 실행하고 해당 스펙을 pod.yaml 파일에 기록
--dry-run=client -o yaml > pod.yaml

kubectl attach my-pod -i                            # 실행중인 컨테이너에 연결
kubectl port-forward my-pod 5000:6000               # 로컬 머신의 5000번 포트를 리스닝하고, my-pod의 6000번 포트로 전달
kubectl exec my-pod -- ls /                         # 기존 파드에서 명령 실행(한 개 컨테이너 경우)
kubectl exec my-pod -c my-container -- ls /         # 기존 파드에서 명령 실행(멀티-컨테이너 경우)
kubectl top pod POD_NAME --containers               # 특정 파드와 해당 컨테이너에 대한 메트릭 표시


<cluster 확인>
kubectl cordon my-node                                                # my-node를 스케줄링할 수 없도록 표기
kubectl drain my-node                                                 # 유지 보수를 위해서 my-node를 준비 상태로 비움
kubectl uncordon my-node                                              # my-node를 스케줄링할 수 있도록 표기
kubectl top node my-node                                              # 주어진 노드에 대한 메트릭 표시
kubectl cluster-info                                                  # 마스터 및 서비스의 주소 표시
kubectl cluster-info dump                                             # 현재 클러스터 상태를 stdout으로 덤프
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # 현재 클러스터 상태를 /path/to/cluster-state으로 덤프

# key와 effect가 있는 테인트(taint)가 이미 존재하면, 그 값이 지정된 대로 대체된다.
kubectl taint nodes foo dedicated=special-user:NoSchedule

리소스 타입 확인 하기
#kubectl api-resources
kubectl api-resources --namespaced=true      # 네임스페이스를 가지는 모든 리소스
kubectl api-resources --namespaced=false     # 네임스페이스를 가지지 않는 모든 리소스
kubectl api-resources -o name                # 모든 리소스의 단순한 (리소스 이름 만) 출력
kubectl api-resources -o wide                # 모든 리소스의 확장된 ("wide"로 알려진) 출력
kubectl api-resources --verbs=list,get       # "list"와 "get"의 요청 동사를 지원하는 모든 리소스 출력
kubectl api-resources --api-group=extensions # "extensions" API 그룹의 모든 리소스

이미지 확인
# 클러스터에서 실행 중인 모든 이미지
kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image'

 # "k8s.gcr.io/coredns:1.6.2" 를 제외한 모든 이미지
kubectl get pods -A -o=custom-columns='DATA:spec.containers[?(@.image!="k8s.gcr.io/coredns:1.6.2")].image'

# 이름에 관계없이 메타데이터 아래의 모든 필드
kubectl get pods -A -o=custom-columns='DATA:metadata.*'


--v=0	일반적으로 클러스터 운영자(operator)에게 항상 보여지게 하기에는 유용함.
--v=1	자세한 정보를 원하지 않는 경우, 적절한 기본 로그 수준.
--v=2	 시스템에서 권장되는 기본 로그 수준이다.	
--v=3	변경 사항에 대한 확장 정보.	
--v=4	디버그 수준 상세화.	
--v=6	요청한 리소스를 표시.	
--v=7	HTTP 요청 헤더를 표시.	
--v=8	HTTP 요청 내용을 표시.	
--v=9	내용을 잘라 내지 않고 HTTP 요청 내용을 표시.

<kube join hash>
ohcuis.t94jnvrfpsgutjjy


Masternode Join 시 필요 3가지
token 값, hash 값, 마스터 노드 주소

1. token
- ohcuis.t94jnvrfpsgutjjy
2. hash
- e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
3. 마스터 노드 주소
- 192.168.65.4


<admin 권한 생성>
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: admin-all-cluster
sub:jects:
- kind: ServiceAccount
  name: admin
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
